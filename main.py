from aiogram import Bot, types
from aiogram.types import InputTextMessageContent,InlineQueryResultArticle
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from create_bot import dp, bot
import logging
import hashlib
import config
import sqlite3
import time

# üü¢convert start..

logging.basicConfig(level = logging.INFO)
logging.basicConfig(level=  logging.DEBUG)



 
async def on_startup(_):
    #‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚á∂–û–ø–æ–≤–µ—â–µ–Ω–∏—è –±–æ—Ç–∞ –æ –µ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏–∏ –≤ –Ω—É–∂–Ω—ã–π  —Ç–µ–±–µ —á–∞—Ç
    bot_info = (await bot.get_me())
    local_time = time.ctime()
    hellos = (f" '{bot_info.first_name}[@{bot_info.username}]' <u>turn on in </u> <b>{local_time}</b>  ")
    await bot.send_message(config.chat_id ,  text= hellos , parse_mode="HTML")
    #‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚á∂ C–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –∫–æ–Ω–Ω–µ–∫—Ç
    try:
        conn = sqlite3.connect(config.sqldatabase) #–ó–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è conn.–ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è connect –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–µ–º—É.–ü—É—Ç—å –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–ø–∏—Å–æ–≤–∞—Ç—å—Å—è –æ—Ç –∫–æ—Ä–Ω—è. –£–∑–Ω–∞—Ç—å –º–æ–∂–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        cur = conn.cursor()#–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç cursor
        #–¢–µ–ø–µ—Ä—å –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö 
        cur.execute("""CREATE TABLE IF NOT EXISTS actions(
           id INTEGER   NOT NULL ,
           u_id  INTEGER,
           fname  TEXT,
           u_uname  TEXT,
           action TEXT,
           curtime INTEGER,
           PRIMARY KEY(id AUTOINCREMENT));
           """) 
        cur.execute("""CREATE TABLE IF NOT EXISTS users(
           id INTEGER   NOT NULL  ,
           fname TEXT,
           lname TEXT,
           u_id  INTEGER ,
           u_uname TEXT,
           u_lang  TEXT,
           latitude TEXT,
           longitude TEXT,
           status INTEGER,
           curtime INTEGER,
           PRIMARY KEY(id AUTOINCREMENT));
           """) 
        logging.info("Created database: OK")
    except Exception as err:
        logging.warning(err)
    else:
        logging.info("Sqlite database working: Ok ")
    
#‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚á∂–ö–õ–ò–ï–ù–¢–°–ö–ê–Ø –ß–ê–°–¢–¨
from handlers import  admin,athan,reg                     
# client.register_hendlers_client(dp)
admin.register_hendlers_admin(dp)
athan.register_hendlers_athan(dp)
 
 

if __name__ == "__main__":
    executor.start_polling(dp, on_startup=on_startup) #skip_updates=True,